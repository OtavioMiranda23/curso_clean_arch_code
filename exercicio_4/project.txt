UC5 - AcceptRide

Ator: Motorista
Input: ride_id, driver_id (account_id)
Output: void

Regras:

deve verificar se o account_id tem is_driver true
deve verificar se o status da corrida é "requested", se não for, lançar um erro
deve verificar se o motorista já tem outra corrida com status "accepted" ou "in_progress", se tiver lançar um erro
deve associar o driver_id na corrida
deve mudar o status para "accepted"


UC6 - StartRide

Ator: Motorista
Input: ride_id
Output: void

Regras:

Deve verificar se a corrida está em status "accepted", se não estiver lançar um erro
Deve modificar o status da corrida para "in_progress"

UC7 - UpdatePosition

Ator: Sistema
Input: ride_id, lat, long
Output: void

Deve verificar se a corrida está em status "in_progress", se não estiver lançar um erro
Deve gerar o position_id
Deve salvar na tabela position: position_id, ride_id, lat, long e date

Considere o modelo de dados:

create table ccca.position (
	position_id uuid,
	ride_id uuid,
	lat numeric,
	long numeric,
	date timestamp
);


UC8 - FinishRide

Ator: Motorista

Input: ride_id

Output: void


    Deve verificar se a corrida está em status "in_progress", se não estiver lançar um erro
    Deve obter todas as positions e calcular a distância entre cada uma delas, para isso utilize um algoritmo que receba duas coordenadas (lat, long) e retorne a distância entre elas em km.
    Com a distância total calculada, calcule o valor da corrida (fare) multiplicando a distância por 2,1
    Atualizar a corrida com o status "completed", a distância e o valor da corrida (fare)


UC9 - ProcessPayment

Ator: Sistema

Input: rideId, creditCardToken, amount

Output: void


    Deve simular o comportamento de um gateway de pagamento, sendo chamado a partir do use case FinishRide e fazendo o processamento do pagamento com base no cartão de crédito do passageiro
    O status deve ser sempre success